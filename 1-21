unsigned int htoi(const char hex[]) {
	unsigned int number = 0;
	int index = 0;
	if (hex[0] == '0' && (hex[1] == 'x' || hex[1] == 'X')) index = 2;
	while (((hex[index] >= '0' && hex[index] <= '9') || (hex[index] >= 'a' && hex[index] <= 'f') || (hex[index] >= 'A' && hex[index] <= 'F')) && (number < UINT_MAX)){
		if (hex[index] >= '0' && hex[index] <= '9') { number = 16 * number + hex[index] - '0'; }
		else if (hex[index] >= 'a' && hex[index] <= 'f') { number = 16 * number + (hex[index] - 'a' + 10); }
		else if (hex[index] >= 'A' && hex[index] <= 'F') { number = 16 * number + (hex[index] - 'A' + 10); }
		else return 0;
		index++;
	}
	return number;
}
void squeeze(char string[], char replacement[]) {
	int i = 0, j = 0;
	for (; string[i] != '\0'; i++) {
		for (int k = 0; replacement[k] != '\0'; k++) {
			if (string[i] == replacement[k]) {
				i++;
				break;
			}
		}
		string[j++] = string[i];
	}
	string[j] = '\0';
}
unsigned getbits(unsigned x, int p, int n) {
	return (x >> p + 1 - n) & ~(~0 << n);
}

unsigned setbits(unsigned x, int p, int n, unsigned y) {
	return (x & ~(~(~0 << n) << p + 1 - n)) | ((y & ~(UINT_MAX << p + 1)) >> p + 1 - n) << p + 1 - n;
}

unsigned invertbits(unsigned x, int n, int p) {
	return setbits(x, n, p, ~x);
}

void expand(char string1[], char string2[]) {
	int i = 0, j=0;
	char c;
	while ((c = string1[i++]) != '\0') {
		if (string1[i] == '-' && string1[i + 1] >= c) {
			i++;
			while (c < string1[i])
				string2[j++] = c++;
		}
		else {
			string2[j++] = c;
		}
	}
	string2[j] = '\0';
}

void itoa(int n, char string[]) {
    int i = 0, sign=false;
    if (n < 0){
        sign = true;
        n = -n;
    }
    do {
        string[i++] = n % 10 + '0';
    } while ((n /= 10) > 0);
    if (sign) string[i++] = '-';
    string[i] = '\0';
    reverse(string);
}

void reverse(char string[]){
    int i, max_length;
    for (i = 0, max_length = strlen(string) - 1; i <= max_length / 2; i++) {
        int temp = string[i];
        string[i] = string[max_length - i];
        string[max_length - i] = temp;
    }
}

void itob(int number, char string[], unsigned short base){
    short sign = false, i = 0, temp;
    if (number < 0) sign = true, number = -number;
    do{
        temp = number % base;
        if (base >= 0 && base <= 9){
            string[i++] = temp + '0';
        }else{
            string[i++] = (temp >= 0 && temp <= 9) ? temp + '0' : temp - 10 + 'A';
        }
    }while(number /= base);
    if (sign) string[i++] = '-';
    string[i] = '\0';
    reverse(string);
}

void qsort(int array[], int left, int right) {
	int counter = 0;
	void swap(int[], int, int);
	if (left >= right)
		return;
	for (int j = 0; j <= right; j++) {
		if (array[j] < array[right]) {
			swap(array, counter++, j);
		}
	}
	swap(array, counter, right);
	qsort(array, 0, counter - 1);
	qsort(array, counter + 1, right);
}
