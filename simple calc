#include "pch.h"
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAXOP 1000
#define MAXINPUT 2000
#define NUMBER '0'

double numbers_stack[MAXINPUT], pop(void);
int numbers_stack_index = 0;
char getop(void), indexer[256];
void push(double);

int main(void){
	int type;
	extern char indexer[256];
	double pop2;
	while ((type = getop()) != EOF) {
		switch (type)
		{
			case NUMBER:
				push(atof(indexer));
				break;
			case '+':
				push(pop() + pop());
				break;
			case '-':
				pop2 = pop();
				push(pop() - pop2);
				break;
			case '*':
				push(pop() * pop());
				break;
			case '/':
				pop2 = pop();
				if (pop2 != 0)
					push(pop() / pop2);
				else
					printf("Error: division by zero");
				break;
			case '\n':
				printf("%.8g\n", pop());
				break;
			default:
				printf("Error: unkown command\n");
				break;
		}
	}

}

void push(double number) {
	extern double numbers_stack[MAXINPUT];
	extern int numbers_stack_index;
	if (numbers_stack_index < MAXINPUT)
		numbers_stack[numbers_stack_index++] = number;
	else
		printf("Error: Stack is full cannot push more values");
}

double pop(void) {
	extern double numbers_stack[MAXINPUT];
	extern int numbers_stack_index;
	if (numbers_stack_index >= 0) {
		numbers_stack[numbers_stack_index--] = '\0';
		return numbers_stack[numbers_stack_index];
	}
	else
		printf("Error: Stack is empty cannot pop more values");
	return 0.0;
}

char getop(void) {
	extern char indexer[256];
	char c;
	int i = 0;
	while ((c = getchar()) == ' ' || c == '\t');
	if (!isdigit(c) && c != '.')
		return c;
	else if (isdigit(c)) {
		indexer[i++] = c;
		while (isdigit(c = getchar()))
			indexer[i++] = c;
	}
	else if (c == '.') {
		indexer[i++] = c;
		while (isdigit(c = getchar()))
			indexer[i++] = c;
	}
	indexer[i] = '\0';
	return NUMBER;
}
