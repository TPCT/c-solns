#include <stdio.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>

#define BUFFER 10000
#define MAXLINELEN 10000
#define MAXLINES 10000
#define MAXALLOCBUFFER 100000

static int bufpos = 0;
static int buf[BUFFER];
static char allocbuf[MAXALLOCBUFFER];
static char *allocps = allocbuf;

char *alloc(int len){
    if (allocbuf + MAXALLOCBUFFER - allocps > len){
        return allocps;
    }
    else{
        return 0;
    }
}

void allocfree(char *p, char * allocation_area[], int allocation_limit){
}

void writelines(char *linesptr[], int nlines){
    for (int i = 0; i < nlines; i++){
        printf("%s\n", *(linesptr++));
    }
}

void qsort(char *array[], int left, int right) {
    int strcmp(const char *, const char *);
    void swap(char **, int *, int *);
    int counter = 0;
    if (counter < 0){ return;}
    if (left >= right)
        return;
    for (int j = 0; j <= right; j++) {
        if (strcmp(array[right], array[j]) > 0) {
            swap(array, counter++, j);
        }
    }
    swap(array, counter, right);
    qsort(array, 0, counter - 1);
    qsort(array, counter + 1, right);
}

void swap(char *array[], int i, int j){
    int *temp = array[i];
    array[i] = array[j], array[j] = temp;
}

void ungetch(char i){
    if (bufpos < BUFFER)
        buf[bufpos++] = i;
    else
        printf("ungetch: There's no space in buffer to save characters");
}

short strend(char *s, char *t){
    int i = 0;
    for (; *s; s++);
    for (; *t; t++, i++);
    for (; *(s--) == *(t--) && i>=0; i--);
    return (short) ((!(++i)) ? 1 : 0);
}

char getch(void){
    if (bufpos > 0)
        return buf[--bufpos];
    else
        printf("getch: There's no characters in buffer");
    return -1;
}

int getline(char *storage, int limit) {
    int i = 0;
    char c;
    for (; (i < limit) && ((*(storage++) = c = getchar()) != EOF) && c != '\n'; i++);
    *(--storage) = '\0';
    return ++i;
}

void readlines(char *linesptr[], int nlines){
    void strcpy(char *, char *);
    char line[MAXLINES], *p = alloc(0);
    int line_length = 0;
    while ((0 < nlines) && (line_length = getline(line, MAXLINELEN)) && alloc(line_length)){
        strcpy(linesptr[--nlines] = p, line);
        p += line_length;
    }
}

void strcat(char *s, char *t){
    for (; *s != '\0'; s++);
    for (; (*(s++) = *(t++)););
}

void strcpy(char *s, char *t){for(; (*(s++) = *(t++)););}

void strncpy(char *s, char *t, int n){for (; (*(s++) = *(t++)) && (--n);); *s = '\0';}

void strncat(char *s, char *t, int n){
    for (; *(s) != '\0'; s++);
    for (; (*(s++) = *(t++)) && (--n););
    *s = '\0';
}

int strcmp(const char *s, const char *t){for(;*s == *t && *t; t++, s++); return *s - *t;}

int strncmp(const char *s, const char *t, int n){for (; *t != '\0' && *s == *t && --n; s++, t++); return ((*t == '\0') ? *(--s) - *(--t) : *s - *t);}

int getint(const char* message){
    static int counter = 0;
    int c;
    int number = 0, sign = 1;
    printf("%s", message);
    while((c = getchar()) != EOF) {
        if (c == '-' && !counter) sign = -1;
        else if (c == '+' && !counter) sign = 1;
        else if (isdigit(c))
            number = 10 * number + c - '0' , counter += 1;
        else if ((!isdigit(c) && counter) || (c == '\n' && counter)){counter = 0; return sign * number;}
        else if (!isdigit(c) && !counter){ungetch(c);}
    }
    return -1;
}

double getfloat(const char * message){
    static int counter = 0;
    int c;
    double number = 0.0;
    int sign = 1, precsion_counter = 0, is_float = 0;
    printf("%s", message);
    while((c = getchar()) != EOF) {
        if (c == '-' && !counter) sign = -1;
        else if (c == '+' && !counter) sign = 1;
        else if (isdigit(c))
            number = 10 * number + c - '0' , counter++, is_float ? precsion_counter++ : 0;
        else if (c == '.' && !is_float) is_float = 1;
        else if ((!isdigit(c) && counter) || (c == '\n' && counter)){counter = 0; return sign * number / pow(10, precsion_counter);}
        else if (!isdigit(c) && !counter){ungetch(c);}
    }
    return -1;
}

size_t strlen(const char *str){
    const char *p = str;
    while(*(p++) != '\0');
    return p - str - 1;
}
