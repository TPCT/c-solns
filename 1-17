#include "pch.h" 
#include <stdio.h>
#include <limits.h>

#define MAX_LIMIT 1000
#define MAX_LINES 1000
#define true 1

int getline(char storage[], int);
void copy(char from[], char to[]);
void clear(char source[], int);

int main(void) {
	char line[MAX_LIMIT], lines[MAX_LINES][MAX_LIMIT];
	int  lines_length[MAX_LINES];
	int counter = 0, line_length;
	while ((line_length = getline(line, MAX_LIMIT)) > 0 && counter < MAX_LINES) {
		if (line_length >= 80) {
			copy(line, lines[counter]);
			lines_length[counter] = line_length;
			counter++;
		}
	}
	for (int i = 0; i < counter; i++) {
		printf("The longest line entered[%d] -> Length[%d]: %s\n", i, lines_length[i], lines[i]);
	}
}

int getline(char storage[], int limit) {
	int i = 0;
	char c;
	for (; (i < limit) && ((c = getchar()) != EOF); i++) {
		storage[i] = c;
		if (c == '\n') 
			break;
	}
	storage[i] = '\0';
	return i;
}

void clear(char source[], int max_length) {
	int i = 0;
	for (; i <= max_length; i++) {
		source[i] = '\0';
	}
}

void copy(char from[], char to[]) {
	int i = 0;
	while ((to[i] = from[i]) != '\0')
		i++;
	to[++i] = '\0';
}

int strindex(char string[], char search[]) {
	int i = 0, length = strlen(string);
	short found = false;
	for (; string[i] != '\0'; i++) {
		for (int j = 0; (search[j] != '\0') && ((i+j) < length); j++) {
			if (string[i + j] == search[j]) 
				found = true;
			else 
				found = false;
		}
		if (found) return i;
	}
	return -1;
}

int revstrindex(char string[], char search[]) {
	int length = strlen(string), search_length = strlen(search), j, i;
	short found = false;
	for (i = length; i >= 0; i--) {
		for (j = 0; (search[j] != '\0') && (i + j - search_length < length); j++) {
			if (string[i - search_length + j] == search[j]) 
				found = true;
			else 
				found = false;
		}
		if (found) return i - search_length + 1;
	}
	return -1;
}

double atof(char string[]) {
	int i = 0, sign = 1;
	double number = 0, power = 1.0;
	for (; string[i] != 0; i++);
	if (string[i] == '-') sign = -1;
	for (; isdigit(string[i]); i++)
		number = 10 * number + (string[i] - '0');
	if (string[i] == '.')
		i++;
	for (; isdigit(string[i]); i++) {
		power *= 10.0;
		number = 10 * number + (string[i] - '0');
	}
	number = sign * number / power;
	while (string[i] != '\0') {
		if (string[i] == 'E' || string[i] == 'e') i++;
		else if (string[i] == '-') sign = -1, i++, number *= power;
		else if (isdigit(string[i])) power = 10 * power + string[i] - '0', i++;
		else break;
	}
	return pow(number, sign * power);
}
